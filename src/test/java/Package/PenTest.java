package Package;

import java.lang.reflect.*;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import static org.testng.Assert.*;

import java.io.*;

public class PenTest {

    @DataProvider
    public Object[][] dataForOneArgConstructor() {
        return new Object[][]{
                {1},
                {10},
                {100}
        };
    }

    @DataProvider
    public Object[][] dataForTwoArgConstructor() {
        return new Object[][]{
                {1, 2},
                {10, 20},
                {100, 200}
        };
    }

    @DataProvider
    public Object[][] dataForThreeArgConstructor() {
        return new Object[][]{
                {1, 1, "BLUE"},
                {1, 1, "Red"},
                {1, 1, "yellow"}
        };
    }

    @DataProvider
    public Object[][] sizeLetterEqualOne() {
        return new Object[][]{
                {"InkValue equal word lenth", "Yaroslav", 8, 1, "Yaroslav"},
                {"IntValue equal zero", "Yaroslav", 0, 1, ""},
                {"Words with space and inkValue is 100", "Yaroslav Bilozir", 100, 1, "Yaroslav Bilozir"},
                {"Words with space and inkValue equal letters", "Yaroslav Bilozir", 15, 1, "Yaroslav Bilozir"}
        };
    }

    @DataProvider
    public Object[][] sizeLetterIsBiggerThanOne() {
        return new Object[][]{
                {"Ink equal word lenth, sizeLetter is 2", "Yaroslav", 16, 2},
                {"Ink equal word lenth, sizeLetter is 3", "Serhii", 18, 3},
                {"Ink equal word lenth, sizeLetter is 10", "Serhii", 60, 10},
                {"Should write half of word", "Yaroslav", 8, 2,},
        };
    }

    @DataProvider
    public Object[][] sizeLetterIsFractional() {
        return new Object[][]{
                {"sizeLetter is 0.5", "tenLetters", 5, 0.5, "tenLetters"},
                {"sizeLetter is 0.1", "tenLetters", 1, 0.1, "tenLetters"},
                {"sizeLetter is 0.1", "tenLetters", 100, 0.9, "tenLetters"},
                {"sizeLetter is 0.5", "tenLetters", 4, 0.5, "tenLette"}
        };
    }

    @DataProvider
    public Object[][] dataForNegativeTests() {
        return new Object[][]{
                {"sizeLetter is negative number", "tenLetters", 10, -1, "tenLetters"},
                {"InkValue is negative number", "tenLetters", -10, 1, "tenLetters"},
                {"InkValue less than required", "fivee", 5, 2, "fivee"},

        };
    }

    @DataProvider
    public Object[][] getColorTest() {
        return new Object[][]{
                {"UpperCase", 1, 1, "BLUE"},
                {"UpperCaseFirstLetter", 1, 1, "Red"},
                {"LowerCase", 1, 1, "yellow"},
        };
    }


    @Test(dataProvider = "dataForOneArgConstructor")
    public void testOneArgConstructor(int inkValue) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(inkValue);
        Field inkContainerValue = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValue.setAccessible(true);
        assertEquals((int) inkContainerValue.get(pen), inkValue);
    }

    @Test(dataProvider = "dataForTwoArgConstructor")
    public void testTwoArgConstructor(int inkValue, double sizeLetter) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(inkValue, sizeLetter);
        Field lettersize = Pen.class.getDeclaredField("sizeLetter");
        lettersize.setAccessible(true);
        assertEquals((double) lettersize.get(pen), sizeLetter);
    }

    @Test(dataProvider = "dataForThreeArgConstructor")
    public void testThreeArgConstructor(int inkValue, double sizeLetter, String inkColor) throws NoSuchFieldException, IllegalAccessException {

        Pen pen = new Pen(inkValue, sizeLetter, inkColor);
        Field color = Pen.class.getDeclaredField("color");
        color.setAccessible(true);
        assertEquals((String) color.get(pen), inkColor);
    }

    @Test(dataProvider = "sizeLetterEqualOne")
    public void testWriteMethodSizeLetterIsOne(String desc, String word, int inkValue, double letterSize, String expectedWord) {
        Pen pen = new Pen(inkValue, letterSize);
        assertEquals(pen.write(word), expectedWord);
    }

    @Test(dataProvider = "sizeLetterIsBiggerThanOne")
    public void testWriteMethodSizeLetterIsBiggerThanOne(String desc, String word, int inkValue, double letterSize) {
        Pen pen = new Pen(inkValue, letterSize);
        assertEquals(pen.write(word), word.substring(0, (int) (inkValue / letterSize)));
    }

    @Test(dataProvider = "sizeLetterIsFractional")
    public void testWriteMethodSizeLetterIsFractional(String desc, String word, int inkValue, double letterSize, String expectedWord) {
        Pen pen = new Pen(inkValue, letterSize);
        assertEquals(pen.write(word), expectedWord);
    }

    @Test(dataProvider = "dataForNegativeTests")
    public void negativeTestsWriteMethod(String desc, String word, int inkValue, double letterSize, String expectedWord) {
        Pen pen = new Pen(inkValue, letterSize);
        assertNotEquals(pen.write(word), expectedWord);
    }

    @Test
    public void testIsWorkMethod() {
        Pen pen = new Pen(1);
        assertTrue(pen.isWork());
    }

    @Test
    public void negativeTestIsWorkMethod() {
        Pen pen = new Pen(0);
        assertFalse(pen.isWork());
    }

    @Test(dataProvider = "getColorTest")
    public void testGetColorMethod(String desc, int inkValue, double sizeLetter, String color) {
        Pen pen = new Pen(inkValue, sizeLetter, color);
        assertEquals(pen.getColor(), color);
    }

    @Test(dataProvider = "getColorTest")
    public void testDoSomethingElseMethod(String desc, int inkValue, double sizeLetter, String color) {

        Pen pen = new Pen(inkValue, sizeLetter, color);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        System.setOut(ps);
        pen.doSomethingElse();
        assertFalse(baos.toString().isEmpty());
    }

}
