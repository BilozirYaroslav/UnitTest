package Package;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import static org.testng.Assert.*;
import java.io.*;

public class PenTest {

    @DataProvider(name = "sizeLetterIsOneOrLess")
    public Object[][] dpMethod1() {
        return new Object[][]{
                {"Words with space and inkValue equal letters", "Yaroslav Bilozir", 15, 1},
                {"InkValue equal word lenth", "Yaroslav", 8, 1},
                {"InkValue equal less than one", "Serhii", 3, 0.5},
                {"IntValue equal zero", "", 0, 1},
                {"Words with space and inkValue is 100", "Yaroslav Bilozir", 100, 1},
        };
    }

    @DataProvider(name = "sizeLetterIsBiggerThanOne")
    public Object[][] dpMethod2() {
        return new Object[][]{
                {"Shoud write partOfWord", "Yaroslav", 8, 2},
                {"Ink equal word lenth, sizeLetter is 2", "Yaroslav", 16, 2},
                {"Ink equal word lenth, sizeLetter is 3", "Serhii", 18, 3},

        };
    }

    @DataProvider(name = "getColorTest")
    public Object[][] dpMethod3() {
        return new Object[][]{
                {"UpperCase", 1, 1, "BLUE"},
                {"UpperCaseFirstLetter", 1, 1, "Red"},
                {"LowerCase", 1, 1, "yellow"},
                {"EmptyValue", 1, 1, ""}
        };
    }

    @Test(dataProvider = "sizeLetterIsOneOrLess")
    public void testWriteMethodSizeLetterIsOneOrLess(String desc, String word, int inkValue, double letterSize) {
        Pen pen = new Pen(inkValue, letterSize);
        assertEquals(pen.write(word), word);
        System.out.println(inkValue);

    }

    @Test(dataProvider = "sizeLetterIsBiggerThanOne")
    public void testWriteMethodSizeLetterIsBiggerThanOne(String desc, String word, int inkValue, double letterSize) {
        Pen pen = new Pen(inkValue, letterSize);
        assertEquals(pen.write(word), word.substring(0, (int) (inkValue / letterSize)));
    }

    @Test
    public void testIsWorkMethod() {
        Pen pen = new Pen(1);
        assertTrue(pen.isWork());
    }

    @Test
    public void testIsWorkMethodNegative() {
        Pen pen = new Pen(0);
        assertFalse(pen.isWork());
    }

    @Test(dataProvider = "getColorTest")
    public void testGetColorMethod(String desc, int inkValue, double sizeLetter, String color) {
        Pen pen = new Pen(inkValue, sizeLetter, color);

        assertEquals(pen.getColor(), color);
    }

    @Test
    public void testDoSomethingElseMethod() {
        int inkValue = 10;
        double letterSize = 1.0;
        String color = "RED";
        Pen pen = new Pen(inkValue, letterSize, color);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        assertEquals(baos.toString(), color);

    }

}
